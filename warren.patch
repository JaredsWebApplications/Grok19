diff --git a/src/App.js b/src/App.js
index 7f16a31..e18c205 100644
--- a/src/App.js
+++ b/src/App.js
@@ -1,86 +1,106 @@
-import React, { Component } from "react";
-
-import "bootstrap/dist/css/bootstrap.min.css";
-import "./App.css"; /* optional for styling like the :hover pseudo-class */
-
-import USAMap from "react-usa-map";
-import LeftHandSide from "./components/LeftHandSide";
-import BarGraph from "./components/BarGraph";
-import { numberWithCommas } from "./helper/conversion";
-
-import swal from "sweetalert";
-import NavigationBar from "./components/NavigationBar";
-
-var axios = require("axios");
-
-const Title = () => (
-    <h1>
-        <b>United States Map</b>
-    </h1>
-);
-
-//<Title />
-//<USAMap
-//customize={this.statesCustomConfig()}
-//onClick={this.mapHandler}
-///>
-
-class App extends Component {
-    /* mandatory */
-    mapHandler = (event) => {
-        var state_name = event.target.textContent.replace(" ", "%20");
-
-        var url = `https://disease.sh/v3/covid-19/states/${state_name}`;
-        console.log(
-            `getting information for the state: ${event.target.textContent}`
-        );
-        axios
-            .get(url)
-            .then(function (response) {
-                console.log(response);
-                var message = `State: ${
-                    response.data.state
-                }\nCases: ${numberWithCommas(response.data.cases)}`;
-                swal("hello world!", {
-                    buttons: {
-                        cancel: "Close",
-                    },
-                    text: message,
-                });
-            })
-            .catch(function (error) {
-                console.log(error);
-            });
-        //alert(event.target.dataset.name);
-    };
-
-    /* optional customization of filling per state and calling custom callbacks per state */
-    statesCustomConfig = () => {
-        return {
-            NJ: {
-                fill: "navy",
-                clickHandler: (event) =>
-                    console.log("Custom handler for NJ", event.target.dataset),
-            },
-            NY: {
-                fill: "#CC0000",
-            },
-        };
-    };
-
-    render() {
-        return (
-            <div className="App">
-                <NavigationBar />
-                <LeftHandSide />
-                <BarGraph />
-                <USAMap
-                    customize={this.statesCustomConfig()}
-                    onClick={this.mapHandler}
-                />
-            </div>
-        );
-    }
-}
-
-export default App;
+import React, { Component } from "react";
+
+import "bootstrap/dist/css/bootstrap.min.css";
+import "./App.css"; /* optional for styling like the :hover pseudo-class */
+
+import USAMap from "react-usa-map";
+import LeftHandSide from "./components/LeftHandSide";
+import BarGraph from "./components/BarGraph";
+import { numberWithCommas } from "./helper/conversion";
+
+import swal from "sweetalert";
+import NavigationBar from "./components/NavigationBar";
+
+import SearchResults from "./components/SearchResults";
+import SearchCriteria from "./components/SearchCriteria";
+
+var axios = require("axios");
+
+const Title = () => (
+    <h1>
+        <b>United States Map</b>
+    </h1>
+);
+
+//<Title />
+//<USAMap
+//customize={this.statesCustomConfig()}
+//onClick={this.mapHandler}
+///>
+
+class App extends Component {
+    constructor(props) {
+        super(props);
+        this.state = {inCriteria: {}};
+        this.searchCriteriaCallback = this.searchCriteriaCallback.bind(this);
+    }
+
+    /* mandatory */
+    mapHandler = (event) => {
+        var state_name = event.target.textContent.replace(" ", "%20");
+
+        var url = `https://disease.sh/v3/covid-19/states/${state_name}`;
+        console.log(
+            `getting information for the state: ${event.target.textContent}`
+        );
+        axios
+            .get(url)
+            .then(function (response) {
+                console.log(response);
+                var message = `State: ${
+                    response.data.state
+                }\nCases: ${numberWithCommas(response.data.cases)}`;
+                swal("hello world!", {
+                    buttons: {
+                        cancel: "Close",
+                    },
+                    text: message,
+                });
+            })
+            .catch(function (error) {
+                console.log(error);
+            });
+        //alert(event.target.dataset.name);
+    };
+
+    /* optional customization of filling per state and calling custom callbacks per state */
+    statesCustomConfig = () => {
+        return {
+            NJ: {
+                fill: "navy",
+                clickHandler: (event) =>
+                    console.log("Custom handler for NJ", event.target.dataset),
+            },
+            NY: {
+                fill: "#CC0000",
+            },
+        };
+    };
+
+    searchCriteriaCallback(criteria) {
+        console.log("searchCriteriaCallback =>\n");
+        console.log(criteria); 
+        this.setState({inCriteria: criteria})
+    }
+
+    render() {
+        return (
+            <div className="App">
+                <NavigationBar />
+                <LeftHandSide />
+                <BarGraph />
+                <USAMap
+                    customize={this.statesCustomConfig()}
+                    onClick={this.mapHandler}
+                />
+                
+                <SearchCriteria cbFunc={this.searchCriteriaCallback} />
+
+                { Object.keys(this.state.inCriteria).length !== 0
+                ? <SearchResults criteria={this.state.inCriteria}/> : "" }
+            </div>
+        );
+    }
+}
+
+export default App;
diff --git a/src/components/SearchCriteria.js b/src/components/SearchCriteria.js
new file mode 100644
index 0000000..3c1c839
--- /dev/null
+++ b/src/components/SearchCriteria.js
@@ -0,0 +1,77 @@
+import "bootstrap/dist/css/bootstrap.min.css";
+
+import React from 'react';
+
+class SearchCriteria extends React.Component {
+    constructor(props) {
+        super(props);
+        
+        let cdate = new Date();
+        this.state = {
+            inState: "California",
+            inCounty: "",
+            inDate: this.get2DaysDateFromTodayDate()
+        };
+
+        this.handleChange = this.handleChange.bind(this);
+        this.handleSubmit = this.handleSubmit.bind(this);
+
+        //this.getCurrentDate = this.getCurrentDate.bind(this);
+        this.get2DaysDateFromTodayDate = this.get2DaysDateFromTodayDate.bind(this);
+        this.get30DaysDateFromTodayDate = this.get30DaysDateFromTodayDate.bind(this);
+
+        this.cbFunc = props.cbFunc;
+    }
+
+    /*getCurrentDate() {
+        let cdate = new Date();
+        return `${cdate.getFullYear()}-${cdate.getMonth() + 1}-${cdate.getDate()}`;
+    }*/
+
+    get2DaysDateFromTodayDate() {
+        const today = new Date()
+        const last2Days = new Date(today);
+        last2Days.setDate(last2Days.getDate() - 2);
+        var result = last2Days.toISOString().split('T')[0];
+        return result;
+    }
+
+    get30DaysDateFromTodayDate() {
+        const today = new Date()
+        const last30Days = new Date(today);
+        last30Days.setDate(last30Days.getDate() - 30);
+        var result = last30Days.toISOString().split('T')[0];
+        return result;
+    }
+
+    handleChange(event) {
+        this.setState({ [event.target.name]: event.target.value });
+        //console.log(event.target.name + " => " + event.target.value);
+    }
+
+    handleSubmit(event) {
+        event.preventDefault();
+        //console.log(this.state.inState + "; " + this.state.inCounty + "; " + this.state.inDate);
+        this.cbFunc(this.state);
+    }
+
+    render() {
+        return (
+            <div className="search-criteria" style={{"background-color":"black"}}>
+                <form onSubmit={this.handleSubmit}>
+                    <input type="text" value={this.state.inState} name="inState" onChange={this.handleChange} placeholder="State, i.e. California"/>
+                    <input type="text" value={this.state.inCounty} name="inCounty" onChange={this.handleChange} placeholder="County, i.e. Orange"/>
+                    
+                    { // possible obsolete feature. read note in SearchResults about "lastdays" param.
+                    true===false ?
+                    <input type="date" value={this.state.inDate} name="inDate" onChange={this.handleChange} min={this.get30DaysDateFromTodayDate()} max={this.get2DaysDateFromTodayDate()} />
+                    : "" }
+                    
+                    <button type="submit">Search</button>
+                </form>
+            </div>
+        );
+    }
+}
+
+export default SearchCriteria;
diff --git a/src/components/SearchResults.js b/src/components/SearchResults.js
new file mode 100644
index 0000000..8b8d9db
--- /dev/null
+++ b/src/components/SearchResults.js
@@ -0,0 +1,150 @@
+import "bootstrap/dist/css/bootstrap.min.css";
+
+import React from 'react';
+
+var axios = require("axios");
+
+class SearchResults extends React.Component {
+    constructor(props) {
+        super(props);
+        
+        this.results = [];
+        this.date = "";
+        this.state = { rows: [] };
+
+        this.fetchData = this.fetchData.bind(this);
+        this.getDaysSinceCurrentDate = this.getDaysSinceCurrentDate.bind(this);
+    }
+
+    componentDidMount() {
+        this.results = [];
+        this.fetchData(this.props.criteria);
+    }
+
+    componentWillReceiveProps(nextProps) {
+        this.results = [];
+        //console.log("componentDidUpdate =>\n");
+        //console.log(nextProps.criteria);
+        this.fetchData(nextProps.criteria);
+    }
+
+    /*fetchData(criteria) {
+        if (criteria.inCounty.length === 0) {
+            var url = `https://disease.sh/v3/covid-19/nyt/states/${criteria.inState}?lastdays=${this.getDaysSinceCurrentDate(criteria.inDate)}`;
+            axios
+                .get(url)
+                .then(function (response) {
+                    //console.log(response);
+                    response.data.map(elem => {
+                        console.log(elem);
+                    });
+                });
+        }
+        else {
+            var url = `https://disease.sh/v3/covid-19/nyt/counties/${criteria.inCounty}?lastdays=${this.getDaysSinceCurrentDate(criteria.inDate)}`; // max lastdays = 30
+            axios
+                .get(url)
+                .then(function (response) {
+                    //console.log(response);
+                    response.data.map(elem => {
+                        if (criteria.inState !== 0 && elem.state === criteria.inState) {
+                            console.log("acceptable => " + elem);
+                        }
+                    });
+                });
+        }
+    }*/
+
+    fetchData(criteria) {
+        this.date = new Date(criteria.inDate).toLocaleDateString();
+        // NOTE: Only getting data from yesterday. Setting lastdays > 1 will mean more oncoming data, therefore heavier load / longer wait.
+        var url = `https://disease.sh/v3/covid-19/historical/usacounties/${criteria.inState.toLowerCase()}?lastdays=3`;
+        axios
+            .get(url)
+            .then(function (response) {
+                response.data.map(elem => {
+                    if (criteria.inCounty.length !== 0) {
+                        if (criteria.inCounty.toLowerCase() === elem.county) {
+                            console.log("matches county");
+                            
+                            var date = new Date(criteria.inDate).toLocaleDateString();
+                            // fix year
+                            date = date.substring(0, date.length - 4) + date.substring(date.length - 2, date.length);
+
+                            //console.log(date);
+                            //console.log(elem.timeline.cases);
+
+                            this.results.push({
+                                state: elem.province,
+                                county: elem.county,
+                                cases: elem.timeline.cases[date],
+                                deaths: elem.timeline.deaths[date]
+                            });
+                        }
+                    }
+                    else {
+                        console.log("matches all");
+
+                        var date = new Date(criteria.inDate).toLocaleDateString();
+                        // fix year
+                        date = date.substring(0, date.length - 4) + date.substring(date.length - 2, date.length);
+
+                        this.results.push({
+                            state: elem.province,
+                            county: elem.county,
+                            cases: elem.timeline.cases[date],
+                            deaths: elem.timeline.deaths[date]
+                        });
+                    }
+                });
+
+                this.setState({ rows: this.results });
+            }.bind(this));
+    }
+
+    // https://stackoverflow.com/questions/12986068/how-to-calculate-number-of-days-between-today-and-given-date-and-code-for-gettim
+    getDaysSinceCurrentDate(date) {
+        var today = new Date();
+        var date_to_reply = new Date(date);
+        var timeinmilisec = date_to_reply.getTime() - today.getTime();
+        return Math.abs(Math.ceil(timeinmilisec / (1000 * 60 * 60 * 24)));
+    }
+
+    renderRows() {
+        const rows = this.state.rows;
+        return rows.map(elem => {
+            return (
+                <tr>
+                    <td>{elem.state}</td>
+                    <td>{elem.county}</td>
+                    <td>{elem.cases}</td>
+                    <td>{elem.deaths}</td>
+                </tr>
+            );
+        })
+    }
+
+    render() {
+        return (
+            <div className="search-results">
+                <br/>
+                <p>Cases since {this.date}</p>
+                <table className="table" style={{"width":"600px","marginLeft":"auto","marginRight":"auto"}}>
+                    <thead className="thead-light">
+                        <tr>
+                            <th scope="col">State</th>
+                            <th scope="col">County</th>
+                            <th scope="col">Deaths</th>
+                            <th scope="col">Cases</th>
+                        </tr>
+                    </thead>
+                    <tbody>
+                        {this.renderRows()}
+                    </tbody>
+                </table>
+            </div>
+        );
+    }
+}
+
+export default SearchResults;
